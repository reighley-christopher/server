http = require("http");
amqp = require("amqp");
socketio = require("socket.io");
express = require("express");
Promise = require("promise");

var amqp = require('amqp');
var app = http.createServer();
var control;
var io = require('socket.io').listen(app);
var rabbitMq = amqp.createConnection({ host: 'localhost' });
var queue;

rabbitMq.on('ready', function(){
  /*TODO why does the service compulsively emit ready events?*/
  if(!control) {
    console.log("try");
    control = express();
    control.listen(7070);
    /*setting the queue to passive turned out to be important, the defaults for the node amqp library 
      and the python one are different, passive causes the node one to adopt the existing defaults without compaining bitterly*/
   console.log("amqp ready ...");
    /*don't start the app until rabbit is alive, otherwise I might try to subscribe to queue that does not exist*/
    control.all("/create/:name", function(req, res){
      var name = "websocket/" + req.params.name;
      queue = rabbitMq.queue(name);
      queue.bind('#');
      queue.subscribe(function (message) {
        console.log(name + " " + message);
        io.sockets.emit(req.params.name, message);
      });
      res.send("websocket/" + req.params.name);
    });
    //control.listen(name);
    app.listen(9001);
  }
  return true;
});


/*  var queue = rabbitMq.queue('rabbitmq_out');

  queue.bind('#'); // all messages
*/

/*
  queue.subscribe(function (message) {
    console.log(message);
    socket.emit('amqp', message);
  });
*/

/*

function handler( req, res )
  {
  res.writeHead(200);
  res.end("hi!");
  }

var buffer = [];

var server = http.createServer(handler);
sock = socketio.listen(server);
server.listen(9001);
console.log("starting ...");
sock.sockets.on('connection', function(socket) {
  console.log("socket connection ...");
  var connection = amqp.createConnection({ host: 'localhost' });
  console.log("amqp ready...");
  connection.queue('rabbitmq_out', function(q) {
    console.log("queue up ...");
/*    q.bind('#');
    q.subscribe(function(message) {
      console.log("amqp: " + message);
      socket.emit('amqp', message);
    }); 
  }); 
}); */
