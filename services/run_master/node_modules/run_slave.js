fs = require('fs');
http = require('http');
Promise = require('promise');

function build(catalog, parameters)
  {
  console.log(parameters);
  console.log(catalog);
  for(z in parameters.inputs) 
    {
    console.log(parameters.inputs[z].task);
    }
  };

function http_promise(host, path, port)
  {
  return new Promise
    (function(resolve, reject){
    http.get({hostname: host, path: path, port: port}, 
      function(rs){
        var doc = []; rs.on('data', function(d){doc.push(d)}); rs.on('end', function(){var ret = Buffer.concat(doc); resolve(JSON.parse(ret));}) 
      });
    });
  }

var get = http_promise('localhost', '/run/catalog', 80).then( http_promise('localhost', '/riak/buckets/processes/keys/'+process.argv[3], 80) )

/*fullfiller function must take the value from http_promise*/
function http_fulfiller( label ) { return function( value ) { } } 

  http.get({hostname:'localhost', port:80, path:'/run/catalog'}, function(rs){
    var doc = []; rs.on('data', function(d){doc.push(d)}); rs.on('end', function(){var ret = Buffer.concat(doc); catalog=JSON.parse(ret); } ) 
  })
}).then(function() {
http.get({hostname:'localhost', port:80, path:'/riak/buckets/processes/keys/'+process.argv[3]}, function(rs){ 
  var doc = []; rs.on('data', function(d){doc.push(d)}); rs.on('end', function(){var ret = Buffer.concat(doc); parameters=JSON.parse(ret); }  ) 
})
).done(function(){build(parameters)});

/*
to impliment behold : 
the behold function will create a new beholder object.
beholder has two members, a function by which takes a single promise and returns a beholder.
a function thow which takes a function and returns a promise.

the result of thow will be a promise which fulfills once all of the "by" promises have fulfilled, with a value computed by the parameter function. 

*/

Beholder = function(){
  var promise_list = [];
  this.by = function( prom ) { };
  this.thow = function( func ) { };
/*playing wih keyboard test*/
}

behold() { return new Beholder }

behold().by( catalog ).by( parameters ).thow( build );


