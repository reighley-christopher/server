#!/usr/bin/ruby -I/nfs/export/UTIL/lib/ruby/repo_analyzer/lib
require('amqp')
require('repo_analyzer')
require('fiber')

QUEUE = ARGV[0]
PROCESS = ARGV[1]
SERIALIZER = ARGV[2]

#p Loader.constants

class ProcessFiber
  def initialize(process)
    @end = false
    @process = process
    @buffer = []
    process.enumerable = self
    @fiber = Fiber.new do
      process.perform
    end
  end

  def start()
    @fiber.resume
  end

  def stop()
    @end = true
    while(@fiber.alive?)
      @fiber.resume
    end
  end

  def push(item)
    @buffer.push(item)
    @fiber.resume
  end

  def each
    until @end
      while @buffer.empty? && !@end
        Fiber.yield
      end
      yield @buffer.shift() until @buffer.empty?
    end
  end
end

EventMachine.run do || 
  connection = AMQP.connect(host: '127.0.0.1')
  channel = AMQP::Channel.new(connection)
  channel.prefetch(10)
  queue = channel.queue(QUEUE)
  process = eval(File.read(PROCESS))

  writer = Object.new
  class << writer
    def write(data)
      STDOUT.write(data)
      STDOUT.flush
    end
  end

  process.output_writer = writer

  fiber = ProcessFiber.new(process)

  def terminate(fiber)
    STDOUT.flush()
    fiber.stop
    EventMachine.stop()
  end

  Signal.trap("TERM") do
    terminate(fiber)
  end

  Signal.trap("INT") do
    terminate(fiber)
  end

  queue.subscribe ack: true do |metadata, payload|
    fiber.push(payload)
    metadata.ack
  #  STDOUT.write(payload)
  #  STDOUT.flush()
  end
  fiber.start()
end
