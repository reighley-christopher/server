#!/usr/bin/python

import pika
import sys
import os
import json

sys.path.append(os.path.dirname(sys.argv[0]) + '/../lib/python/json_stream')
print sys.path
from json_stream import JsonStream

from twisted.internet import reactor, protocol, stdio

print sys.argv

QUEUE = sys.argv[1]
LABEL = sys.argv[2]

#different kinds of parsers
class OutputParser:
    def send(self, message):
        channel.basic_publish(exchange='', routing_key=QUEUE, body=message )

class Random(OutputParser):
    #consume satisfies the OutputParser interface
    def consume(self, data):
        print(data)
        print("sending")
        data_hash = {LABEL : data}
        data_string = json.dumps(data_hash)
        self.send(data_string)

parser = Random()

#rabbit MQ connection
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

try :
  channel.queue_declare(queue=QUEUE, passive=True)
except :
  channel = connection.channel()
  channel.queue_declare(queue=QUEUE)

class MessageOut(protocol.Protocol):
    def dataReceived(self, data):
        parser.consume(data)

class MessageOutFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return MessageOut()

stdio.StandardIO(MessageOut())
reactor.run()

